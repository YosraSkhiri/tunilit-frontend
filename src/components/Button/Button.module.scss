@use "../../sass/mixins" as *;

.btn {
	display: flex;
	align-items: center;
	justify-content: center;
	width: fit-content;
	gap: 0.625rem;
	padding: 0.625rem 1.875rem;
	border-radius: $corner-radius-medium;
	border-width: $border-medium;
	border-style: solid;
	border-color: transparent;
	font-weight: 500;
	overflow: hidden;
	transition: all 0.25s ease-in-out;
	cursor: pointer;

	&--md {
		font-size: 1rem;
		line-height: 1rem;
		height: $btn-md-height;
	}

	&--lg {
		font-size: 1.125rem;
		line-height: 1.125rem;
		height: $btn-lg-height;
	}

	&--full-width {
		width: 100%;
	}

	&--shadow {
		position: relative;
		z-index: 1;
		width: fit-content;
		height: fit-content;

		&::after {
			position: absolute;
			display: block;
			bottom: -22px;
			left: -16px;
			z-index: -1;
			pointer-events: none;
		}

		&-md::after {
			content: url('/images/dotted-shadow-md.svg');
		}

		&-lg::after {
			content: url('/images/dotted-shadow-lg.svg');
		}
	}

	&--primary {
		@include generateButtonVariant($button-variants, 'primary', $btn-md-height, $btn-lg-height);
	}

	&--secondary {
		@include generateButtonVariant($button-variants, 'secondary', $btn-md-height, $btn-lg-height);
	}

	&--tertiary {
		@include generateButtonVariant($button-variants, 'tertiary', $btn-md-height, $btn-lg-height);
	}

	&--success {
		@include generateButtonVariant($button-variants, 'success', $btn-md-height, $btn-lg-height);
	}

	&--error {
		@include generateButtonVariant($button-variants, 'error', $btn-md-height, $btn-lg-height);
	}

	&--subtle {
		@include generateButtonVariant($button-variants, 'subtle', $btn-md-height, $btn-lg-height);
	}

	&--disabled {
		&-outlined {
			border-color: map-get($button-variants, 'disabled', 'border');
			color: map-get($button-variants, 'disabled', 'text');
			background-color: map-get($button-variants, 'disabled', 'surface');
			cursor: not-allowed;

      & svg {
        stroke: map-get($button-variants, 'disabled', 'icon');
      }
		}

		&-subtle {
			color: map-get($button-variants, 'disabled', 'text');
			background-color: map-get($button-variants, 'disabled', 'surface');
			cursor: not-allowed;

      & svg {
        stroke: map-get($button-variants, 'disabled', 'icon');
      }
		}
	}
}

.wrapper {
	&__arrow {
		position: relative;
		width: fit-content;
		height: fit-content;
		transition: all 0.3s ease-in-out;

		& > .btn--primary {
			min-width: 200px;
			padding-left: 50px;
			padding-right: 50px;
		}

		&:hover {
			.arrow:not(.arrow--disabled) > .path1 {
				stroke-dasharray: 80;
				stroke-dashoffset: 80;
				animation: draw 0.5s ease-in-out forwards;
			}

			.arrow:not(.arrow--disabled) > .path2,
			.arrow:not(.arrow--disabled) > .path3 {
				stroke-dasharray: 40;
				stroke-dashoffset: 40;
				animation: draw 0.5s 0.5s ease-in-out forwards;
			}

			& > .arrow > path {
				stroke: $component-button-primary-hover-icon;
			}
		}
	}
}

.arrow {
	position: absolute;
	top: 50%;
	right: 0;
	z-index: 10;
	display: block;
	transform: translate3d(50%, -50%, 0);
	pointer-events: none;
	stroke: $component-button-primary-rest-icon;

	&.arrow--focus-primary > path {
		stroke: $component-button-primary-focused-icon;
	}
}

.loader--animation {
  animation: rotation 2s infinite linear;
}

@keyframes draw {
	to {
		stroke-dashoffset: 0;
	}
}

@keyframes rotation {
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(359deg);
	}
}
